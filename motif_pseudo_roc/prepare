#!/usr/bin/env ruby
require 'json'
require 'optparse'
require 'fileutils'
require_relative 'cli_args'

require_relative 'utils'
require_relative 'motif_preprocessing'
require_relative 'peak_preprocessing'
require_relative 'assembly_preprocessing'

require_relative 'background'
require_relative 'sequence_dataset'

options = {
  top_peaks: {num_peaks: 'all'},
  flank_size: 150,
  summit_column: 10,
  background_type: :di, background: :infer,
  positive_fn: '/sequences/positive.fa',
}

option_parser = OptionParser.new{|opts|
  opts.on('--positive-file FILE', 'Resulting FASTA file with positive sequences'){|filename| options[:positive_fn] = filename }
  opts.on('--store-background FILE', "Store background of the resulting FASTA file (background inference is time-consuming stage)"){|filename|
    options[:background_fn] = filename
  }
  optparse_add_peaks_opts(opts, options)
  opts.on('--background VALUE', "One can specify mono/dinucleotide background inferred from (di)nucleotide frequencies in dataset or can use custom background. " +
                                "Available values: `infer:mono`, `infer:di`, `mono:<pA>,<pC>,<pG>,<pT>`, `di:<pAA>,<pAC>,...,<pTT>`, " +
                                "`gc:<GC content in [0,1] range>` or `uniform`. (Default: `infer:di`)"){|value|
    configure_background!(options, value)
  }

  opts.on('--curve-points', 'ROC curve points'){ options[:curve_points] = true }
}

option_parser.parse!(ARGV)

# We don't need assembly when peaks are provided in FASTA format, thus we can ignore
# missing `--assembly-name` or not provided `/assembly.fa`.
# An exception will be triggered later if assembly is needed but absent.
assembly_infos = obtain_and_preprocess_assembly!(options, necessary: false)

# negative fasta is not used in this benchmark and not provided!
positive_fasta_fn = obtain_and_preprocess_peak_sequences!(options, assembly_infos)
FileUtils.mkdir_p(File.dirname(options[:positive_fn]))
FileUtils.cp(positive_fasta_fn, options[:positive_fn])


if options[:background] == :infer
  dataset = SequenceDataset.new(positive_fasta_fn)
  if options[:background_type] == :mono
    background = local_mono_background(dataset).join(',')
  elsif options[:background_type] == :di
    background = local_di_background(dataset).join(',')
  else
    raise "Should not be here"
  end
else
  background = options[:background]
end

if options[:background_fn]
  bg_type = options[:background_type]
  bg = background.is_a?(Array) ? background.join(',') : background
  FileUtils.mkdir_p(File.dirname(options[:background_fn]))
  File.write(options[:background_fn], "#{bg_type}:#{bg}")
end
