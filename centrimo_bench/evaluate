#!/usr/bin/env ruby
require 'json'
require 'optparse'
require 'shellwords'
require 'fileutils'

require_relative 'cli_args'
require_relative 'utils'
require_relative 'motif_preprocessing'
require_relative 'peak_preprocessing'
require_relative 'assembly_preprocessing'


# Resulting values are intentionally left as strings, not numbers. That's because some of values can be
# e.g. "1.5e-436" which can't be converted to float without loss of precision
def read_centrimo_results(filename)
  lines = File.readlines(filename).map(&:chomp)
  row = lines[1].split("\t").map(&:strip)
  db_index, motif_id, motif_alt_id, consensus, evalue, adj_pvalue, log_adj_pvalue, \
    bin_location, bin_width, total_width, sites_in_bin, total_sites, p_success, pvalue, mult_tests = *row
  {
    motif_id: motif_id, consensus: consensus,
    evalue: evalue, adj_pvalue: adj_pvalue, log_adj_pvalue: log_adj_pvalue,
    bin_location: bin_location, bin_width: bin_width, total_width: total_width, sites_in_bin: sites_in_bin,
    total_sites: total_sites, p_success: p_success, pvalue: pvalue, mult_tests: mult_tests,
  }
end

# aka `concentration`
def central_probability(sites, motif_length:, sequence_length:, total_sites:, window_size: 20)
  start = (0.5 * (sequence_length - motif_length - 1) - 0.5 * window_size).ceil
  stop = start + window_size
  sites[start .. stop].sum(0.0) / total_sites
end

options = {
  flank_size: 250,
  pseudocount: :log,
  word_count: 100,
  curve_points: false,
  summit_column: 10,
  jsonify_results: false,
  top_peaks: {num_peaks: 'all'},
  results_folder: nil,
  positive_fn: nil,
}

option_parser = OptionParser.new{|opts|
  opts.on('--positive-file FILE', 'Prepared FASTA file with positive sequences to load (instead of raw peaks)'){|filename| options[:positive_fn] = filename }
  optparse_add_peaks_opts(opts, options)
  optparse_add_motif_opts(opts, options)
  opts.on('--results FOLDER', 'Specify results folder. By default a novel random-named folder is created'){|folder| options[:results_folder] = folder }

  opts.on('--json', 'Print results as a json file'){ options[:jsonify_results] = true }
  # opts.on('--window-size', '...')
}

option_parser.parse!(ARGV)

if options[:positive_fn]
  positive_seqs_fn = options[:positive_fn]
else
  # We don't need assembly when peaks are provided in FASTA format, thus we can ignore
  # missing `--assembly-name` or not provided `/assembly.fa`.
  # An exception will be triggered later if assembly is needed but absent.
  assembly_infos = obtain_and_preprocess_assembly!(options, necessary: false)
  positive_seqs_fn = obtain_and_preprocess_peak_sequences!(options, assembly_infos)
end

motif_fn = obtain_and_preprocess_motif!(options, necessary_motif_type: :pfm, default_motif_type: :no_default)

word_count = get_meme_word_count(motif_fn)
motif_length = get_meme_motif_length(motif_fn)
pseudocount = calculate_pseudocount(word_count, pseudocount: options[:pseudocount])

results_folder = options[:results_folder] || tempname(prefix: 'results')
FileUtils.mkdir_p(results_folder)

system("centrimo #{positive_seqs_fn} #{motif_fn} --oc #{results_folder} --verbosity 1 --motif-pseudo #{pseudocount} " + ARGV.shelljoin)
info = read_centrimo_results("#{results_folder}/centrimo.tsv")
if !info[:motif_id]
  $stderr.puts "Fallback: all sequences were filtered out so we lower threshold"
  system("centrimo #{positive_seqs_fn} #{motif_fn} --oc #{results_folder} --verbosity 1 --motif-pseudo #{pseudocount} --score 1 --use-pvalues " + ARGV.shelljoin)
  info = read_centrimo_results("#{results_folder}/centrimo.tsv")
end

info = read_centrimo_results("#{results_folder}/centrimo.tsv")

# calculate concentration for different window sizes
sites = File.readlines("#{results_folder}/site_counts.txt").drop(1).map(&:strip).map{|l| Float(l.split("\t").last) }

concentrations = (5..100).step(5).map{|window_size|
  concentration = central_probability(sites,
                                      motif_length: motif_length,
                                      sequence_length: 2 * options[:flank_size],
                                      total_sites: Integer(info[:total_sites]),
                                      window_size: window_size)
  {window_size: window_size, concentration: concentration}
}

info[:concentrations] = concentrations

if options[:jsonify_results]
  puts info.to_json
else
  puts info[:evalue]
end
