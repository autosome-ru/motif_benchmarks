#!/usr/bin/env Rscript
library('optparse')
library('PRROC')
source('/app/utils.R')
source('/app/motif_preprocessing.R')
source('/app/peak_preprocessing.R')
source('/app/assembly_preprocessing.R')
source('/app/arglist_options.R')
source('/app/roc_pr_curves.R')

width = 800
height = 800


option_list = c(
  arglist_peaks_options,
  arglist_assembly_options,
  make_option(c("--positive-file"), dest='positive_fn', type='character', default=NA, help="Precomputed positive sequences filename"),
  make_option(c("--negative-file"), dest='negative_fn', type='character', default=NA, help="Precomputed negative sequences filename"),

  arglist_motif_options,

  make_option(c("--plot-roc"), dest="plot_roc_image", default=FALSE, action="store_true", help="Plot ROC curve"),
  make_option(c("--plot-roc-filename"), dest="roc_image_filename", type="character", default="/results/roc_curve.png", help="Specify plot filename [default=%default]"),
  make_option(c("--plot-pr"), dest="plot_pr_image", default=FALSE, action="store_true", help="Plot PR curve"),
  make_option(c("--plot-pr-filename"), dest="pr_image_filename", type="character", default="/results/pr_curve.png", help="Specify plot filename [default=%default]"),
  make_option(c("--roc"), dest="store_roc", default=FALSE, action="store_true", help="Store ROC curve point"),
  make_option(c("--roc-filename"), dest="roc_filename",type="character", default="/results/roc_curve.tsv", help="Specify ROC curve points filename [default=%default]"),
  make_option(c("--pr"), dest="store_pr", default=FALSE, action="store_true", help="Store PR curve point"),
  make_option(c("--pr-filename"), dest="pr_filename",type="character", default="/results/pr_curve.tsv", help="Specify PR curve points filename [default=%default]"),
  make_option(c("--json"), dest="jsonify_results", default=FALSE, action="store_true", help="Print results as a json file")
)

usage = paste(
  "",
  "docker run --rm \\",
  "           -v {PFM}:/motif.pfm \\",
  "           -v {sequences folder}:/sequences \\",
  "           pwmeval_chipseq \\",
  "             evaluate \\",
  "             --motif /motif.pfm \\",
  "             --positive-file /sequences/positive.fa \\",
  "             --negative-file /sequences/negative.fa \\",
  "             [options]",
  " or",
  "docker run --rm \\",
  "           -v {PFM}:/motif.pfm \\",
  "           -v {Peaks}:/peaks[.bed|.narrowPeak][.gz] \\",
  "           -v {assembly folder}:/assembly/ \\",
  "           pwmeval_chipseq \\",
  "             evaluate \\",
  "             --motif /motif.pfm \\",
  "             --peaks /peaks.bed \\",
  "             --assembly-name {UCSC assembly name} \\",
  "             [options]",
  "  or",
  "docker run --rm \\",
  "           -v {assembly folder}:/assembly/ \\",
  "           -v {results}:/results \\",
  "           pwmeval_chipseq \\",
  "             evaluate \\",
  "             --motif-url {Motif URL} \\",
  "             --peaks-url {Peaks URL} \\",
  "             --assembly-name {UCSC assembly name} \\",
  "             --plot-roc --plot-pr --roc --pr [options]",
  "  or",
  "docker run --rm  pwmeval_chipseq  evaluate \\",
  "                   --motif-url {Motif URL} \\",
  "                   --peaks-url {Peaks URL} \\",
  "                   --assembly-name {UCSC assembly name} \\",
  "                   [options]",
  sep="\n"
)

description = paste("\n",
                    "Note!\n",
                    "  All local paths (for peaks file, PFM file, assembly folder and results folder) should be absolute.\n",
                    "  Peaks and motif format can be derived from extension.\n",
                    "  You can use bed/narrowPeak extensions for peaks files.\n",
                    "  Also you can use gz extension for gzipped peaks.\n",
                    "  So that /peaks.narrowPeak.gz is a correct way to pass a gzipped narrowPeak file.\n",
                    "  Options like --bed/--narrowPeak, --gz/--not-compressed, --pcm/--pfm override derived format,\n",
                    "  what is especially useful for passing data via url.\n",
                    "  In case when format is specified via options, `/peaks` and `/motif` with extension omitted can be used.\n",
                    "\n",
                    "  Assembly can be passed as separate files (FASTA, its index and chromosome sizes),\n",
                    "  or as a folder /assembly with necessary files and assembly name specified. If some of necessary files\n",
                    "  don't exists, they are calculated on the fly and are stored into /assembly folder.\n",
                    "  If the folder is mounted to a file system, an assembly and all supplementary files\n",
                    "  will be stored for reuse in the following runs (first time it'll be slow).\n",
                    "  --assembly-name [hg38/mm9/...] allows one to choose a necessary genome assembly amongst several ones.\n",
                    "  If specified assembly doesn't exist in a specified folder, it will be automatically downloaded from UCSC (not always possible).\n",
                    "  But one should note that if /assembly folder not mounted, genome and supplementary data will live only during container existence",
                    "\n",
                    "  It's possible to run `evaluate` without peak files and assembly, it's enough to pass positive and negative sequences FASTA\n",
                    "  specified by --positive-file/--negative-file options. These files can be prepared using `prepare` script.\n"
                    )
opt_parser <- OptionParser(option_list=option_list, usage = usage, description=description);
opts_and_args <- parse_args(opt_parser, positional_arguments=TRUE);
opts <- opts_and_args[[1]]
args <- opts_and_args[[2]]

motif_fn <- obtain_and_preprocess_motif(opts)

if (is.na(opts$positive_fn) && is.na(opts$negative_fn)) {
  assembly = obtain_and_preprocess_assembly(opts)
  peak_centers_filename = obtain_and_preprocess_peak_centers(opts)

  top_peaks_fn = get_top_peaks(peak_centers_filename, opts$num_top_peaks)
  pos_peaks_fn = extend_positive_peaks(top_peaks_fn, assembly)
  neg_peaks_fn = extend_negative_peaks(top_peaks_fn, assembly)
  pos_seq_fn = get_peaks_fasta(pos_peaks_fn, assembly)
  neg_seq_fn = get_peaks_fasta(neg_peaks_fn, assembly)
} else if (is.na(opts$positive_fn) || is.na(opts$negative_fn)) {
  stop("Provide either both positive and negative prepared sequences, or none of them")
} else {
  if (!is.na(opts$peaks_fn) || !is.na(opts$peaks_url) ||
      !is.na(opts$assembly_name) || !is.na(opts$assembly_fasta_fn) || !is.na(opts$assembly_sizes_fn)) {
    stop("Provide either prepared sequences, or peaks+assembly to prepare sequences. But not both.")
  }
  pos_seq_fn = opts$positive_fn
  neg_seq_fn = opts$negative_fn
  if (endsWith(pos_seq_fn, '.gz')) {
    pos_seq_fn = decompress_file(pos_seq_fn, "gz")
  }
  if (endsWith(neg_seq_fn, '.gz')) {
    neg_seq_fn = decompress_file(neg_seq_fn, "gz")
  }
}

pos_scores_fn = tempfile('pos_scores')
neg_scores_fn = tempfile('neg_scores')

system(paste("/app/pwm_scoring -r -u -m ", shQuote(motif_fn), " ", shQuote(pos_seq_fn), " > ", shQuote(pos_scores_fn)))
system(paste("/app/pwm_scoring -r -u -m ", shQuote(motif_fn), " ", shQuote(neg_seq_fn), " > ", shQuote(neg_scores_fn)))

pos <- as.matrix(read.table(pos_scores_fn))
neg <- as.matrix(read.table(neg_scores_fn))
should_calculate_roc <- opts$store_roc || opts$plot_roc_image
should_calculate_pr <- opts$store_pr || opts$plot_pr_image
roc_infos <- roc.curve(pos, neg, curve=should_calculate_roc)
pr_infos <- pr.curve(pos, neg, curve=should_calculate_pr)
roc_auc = roc_infos$auc
pr_auc = pr_infos$auc.integral
pr_auc_dg = pr_infos$auc.davis.goadrich

if (opts$store_roc) {
  roc_data <- roc_tpr_fpr(roc_infos$curve)
  store_roc(roc_data, opts$roc_filename)
}
if (opts$store_pr) {
  pr_data <- pr_precision_recall(pr_infos$curve)
  store_pr(pr_data, opts$pr_filename)
}

if (opts$plot_roc_image) {
  plot_curve(roc_infos, opts$roc_image_filename, width = width, height = height)
}
if (opts$plot_pr_image) {
  plot_curve(pr_infos, opts$pr_image_filename, width = width, height = height)
}

if (opts$jsonify_results) {
  library('rjson')
  metrics <- list(roc_auc=roc_auc, pr_auc=pr_auc, pr_auc_davis_goadrich=pr_auc_dg)
  supplementary <- list()
  if (opts$store_roc) {
    supplementary$roc_curve <- roc_curve_as_points_list(roc_data$tpr, roc_data$fpr)
  }
  if (opts$store_pr) {
    supplementary$pr_curve  <- pr_curve_as_points_list(pr_data$precision, pr_data$recall)
  }
  results <- list(metrics=metrics, supplementary=supplementary)
  writeLines(toJSON(results))
} else{
  writeLines(paste('ROC', as.character(roc_auc)))
  writeLines(paste('PR', as.character(pr_auc)))
}
