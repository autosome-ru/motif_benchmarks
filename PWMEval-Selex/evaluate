#!/usr/bin/env Rscript
library(optparse)
library('PRROC')
source('/app/utils.R')
source('/app/motif_preprocessing.R')
source('/app/seq_preprocessing.R')
source('/app/arglist_options.R')
source('/app/roc_pr_curves.R')

take_top_fraction <- function(values, top_fraction) {
  N = round(top_fraction*length(values))
  top_values = sort(values, decreasing=TRUE)[1:N]
  return(top_values)
}

width = 800
height = 800
pointsize = 20

option_list = c(
  arglist_sequence_options,
  make_option(c("--positive-file"), dest='positive_fn', type='character', default=NA, help="Precomputed positive sequences filename"),
  make_option(c("--negative-file"), dest='negative_fn', type='character', default=NA, help="Precomputed negative sequences filename"),

  arglist_motif_options,

  make_option(c("--top"), dest="top_fraction", type="double", default=0.1, help="Fraction of top sequences to take [default=%default]"),

  make_option(c("--plot-roc"), dest="plot_roc_image", default=FALSE, action="store_true", help="Plot ROC curve"),
  make_option(c("--plot-pr"), dest="plot_pr_image", default=FALSE, action="store_true", help="Plot PR curve"),
  make_option(c("--plot-roc-filename"), dest="roc_image_filename", type="character", default="/results/roc_curve.png", metavar='FILENAME', help="Specify plot filename [default=%default]"),
  make_option(c("--plot-pr-filename"), dest="pr_image_filename", type="character", default="/results/pr_curve.png", metavar='FILENAME', help="Specify plot filename [default=%default]"),
  make_option(c("--roc"), dest="store_roc", default=FALSE, action="store_true", help="Store ROC curve point"),
  make_option(c("--roc-filename"), dest="roc_filename",type="character", default="/results/roc_curve.tsv", help="Specify ROC curve points filename [default=%default]"),
  make_option(c("--pr"), dest="store_pr", default=FALSE, action="store_true", help="Store PR curve point"),
  make_option(c("--pr-filename"), dest="pr_filename",type="character", default="/results/pr_curve.tsv", help="Specify PR curve points filename [default=%default]"),  
  make_option(c("--json"), dest="jsonify_results", default=FALSE, action="store_true", help="Print results as a json file")
)

usage = paste(
  "\n",
  "docker run --rm \\",
  "           --volume {Motif matrix}:/motif[.pfm|.pcm]:ro \\",
  "           --volume {Selex FASTA}:/seq[.fa|.fq][.gz]:ro \\",
  "           pwmeval_selex \\",
  "               --seq /seq.fastq.gz \\",
  "               --motif /motif.pfm \\",
  "               [options]\n",
  "  or\n",
  "docker run --rm  pwmeval_selex --motif-url {Motif URL} --seq-url {Selex FASTA URL} [options]\n",
  "\n",
  "If you need output files (typically ROC-curve figures, you should additionally mount results folder), e.g.\n",
  "docker run --rm \\",
  "           --volume {Motif matrix}:/motif[.pfm|.pcm]:ro \\",
  "           --volume {Selex FASTA}:/seq[.fa|.fq][.gz]:ro \\",
  "           --volume {Results folder}:/results \\",
  "           pwmeval_selex \\",
  "               evaluate \\",
  "               --seq /seq.fa.gz \\",
  "               --motif /motif.pfm \\",
  "               --plot  --plot-filename /results/motif_ROC.png \\",
  "               --roc  --roc-filename /results/motif_ROC.tsv \\",
  "               [options]\n",
  sep = "\n"
)
description = paste("\n",
                    "Note!\n",
                    "  All local paths (for FASTA file, PFM file and results folder) should be absolute.\n",
                    "  Sequences and motif format can be derived from extension.\n",
                    "  You can use pcm extension for positional count matrices and pfm/pfm for frequency matrices.\n",
                    "  You can use fa/fasta extensions for FASTA files and fq/fastq for FASTQ files.\n",
                    "  Also you can use gz extension for gzipped sequences.\n",
                    "  So that `--seq /seq.fastq.gz` is a correct way to pass a gzipped FASTQ file.\n",
                    "  Options like --fa/--fq, --gz/--not-compressed, --pcm/--pfm override derived format,\n",
                    "  what is especially useful for passing data via url.\n",
                    "  In case when format is specified via options, `/seq` and `/motif` with extension omitted can be used.\n")
opt_parser <- OptionParser(option_list=option_list, usage = usage, description=description);
opts_and_args <- parse_args(opt_parser, positional_arguments=TRUE);
opts <- opts_and_args[[1]]
args <- opts_and_args[[2]]

pfm_motif_filename = obtain_and_preprocess_motif(opts)

if (is.na(opts$positive_fn) && is.na(opts$negative_fn)) {
  pos_seq_fn = obtain_and_preprocess_sequences(opts)
  neg_seq_fn = tempfile()

  if (is.na(opts$seed)) {
    system(paste("/app/seqshuffle", shQuote(pos_seq_fn), ">", shQuote(neg_seq_fn)))
  } else {
    system(paste("/app/seqshuffle -s", opts$seed, shQuote(pos_seq_fn), ">", shQuote(neg_seq_fn)))
  }

  pos_seq_fn = append_flanks(pos_seq_fn, opts)
  neg_seq_fn = append_flanks(neg_seq_fn, opts)
} else if (is.na(opts$positive_fn) || is.na(opts$negative_fn)) {
  stop("Provide either both positive and negative prepared sequences, or none of them")
} else {
  pos_seq_fn = opts$positive_fn
  neg_seq_fn = opts$negative_fn
  if (endsWith(pos_seq_fn, '.gz')) {
    pos_seq_fn = decompress_file(pos_seq_fn, "gz")
  }
  if (endsWith(neg_seq_fn, '.gz')) {
    neg_seq_fn = decompress_file(neg_seq_fn, "gz")
  }
}

pos_scores_fn = tempfile('pos_scores')
neg_scores_fn = tempfile('neg_scores')

system(paste("/app/pwm_scoring -r -w", opts$pseudo_weight, "-m", shQuote(pfm_motif_filename), shQuote(pos_seq_fn), " > ", shQuote(pos_scores_fn)))
system(paste("/app/pwm_scoring -r -w", opts$pseudo_weight, "-m", shQuote(pfm_motif_filename), shQuote(neg_seq_fn), " > ", shQuote(neg_scores_fn)))

pos <- log10(as.numeric(read.table(pos_scores_fn, header=F)[,1]))
neg <- log10(as.numeric(read.table(neg_scores_fn, header=F)[,1]))
pos_top <- take_top_fraction(pos, opts$top_fraction)
neg_top <- take_top_fraction(neg, opts$top_fraction)

should_calculate_roc <- opts$store_roc || opts$plot_roc_image
should_calculate_pr <- opts$store_pr || opts$plot_pr_image

roc_infos <- roc.curve(pos_top, neg_top, curve=should_calculate_roc)
pr_infos  <-  pr.curve(pos_top, neg_top, curve=should_calculate_pr)
roc_auc = roc_infos$auc
pr_auc = pr_infos$auc.integral
pr_auc_dg = pr_infos$auc.davis.goadrich

if (opts$store_roc) {
  roc_data <- roc_tpr_fpr(roc_infos$curve)
  store_roc(roc_data, opts$roc_filename)
}
if (opts$store_pr) {
  pr_data <- pr_precision_recall(pr_infos$curve)
  store_pr(pr_data, opts$pr_filename)
}

if (opts$plot_roc_image) {
  plot_curve(roc_infos, opts$roc_image_filename, width = width, height = height)
}
if (opts$plot_pr_image) {
  plot_curve(pr_infos, opts$pr_image_filename, width = width, height = height)
}

if (opts$jsonify_results) {
  library(rjson)
  metrics <- list(roc_auc=roc_auc, pr_auc=pr_auc, pr_auc_davis_goadrich=pr_auc_dg)
  supplementary <- list()
  if (opts$store_roc) {
    supplementary$roc_curve <- roc_curve_as_points_list(roc_data$tpr, roc_data$fpr)
  }
  if (opts$store_pr) {
    supplementary$pr_curve  <- pr_curve_as_points_list(pr_data$precision, pr_data$recall)
  }
  results <- list(metrics=metrics, supplementary=supplementary)
  writeLines(toJSON(results))
} else{
  writeLines(as.character(roc_auc))
  writeLines(as.character(pr_auc))
}
