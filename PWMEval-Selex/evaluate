#!/usr/bin/env Rscript
library(optparse)
source('/app/utils.R')
source('/app/motif_preprocessing.R')
source('/app/seq_preprocessing.R')
source('/app/arglist_options.R')

# Define Approximate AUC computating function
auc_approx <- function(pos, neg, top_fraction, n_bins) {
  N = round(top_fraction*length(POS))
  pos_sorted = sort(pos, decreasing=T)[1:N]
  neg_sorted = sort(neg, decreasing=T)[1:N]

  # Define common break points for score historgrams (n_bins, the more the better)
  max = max(pos_sorted, neg_sorted)
  min = min(pos_sorted, neg_sorted)
  inc = (max - min) / n_bins
  breaks = seq(min, max, inc)
  if (length(breaks) == 1) {
    return( list(auc=0.5, tpr=c(0, 1), fpr=c(0, 1)) )
  }

  # Compute density distributions for scores of positives and negative examples
  # Note: *(max-min)/n_bins) ensures that densities sum to 1!
  dpos = rev(hist(pos_sorted, breaks=breaks, plot=F)$density * (max-min)/n_bins)
  dneg = rev(hist(neg_sorted, breaks=breaks, plot=F)$density * (max-min)/n_bins)

  # AUROC computation for binned score values (fast)
  sens = rep(0, n_bins)
  fpr  = rep(0, n_bins)
  sens[1] = dpos[1]
  fpr[1]  = dneg[1]
  for(i in 2:n_bins) {
    sens[i] = sens[i-1] + dpos[i]
    fpr[i] = fpr[i-1] + dneg[i]
  }
  AUC = dneg[1] * 0.5 * (sens[1] - 0)
  for(i in 2:n_bins) {
    AUC = AUC + dneg[i] * 0.5 * (sens[i] + sens[i-1])
  }
  AUC = max(min(AUC, 1.0), 0.0)
  return( list(auc=AUC, fpr=fpr, tpr=sens) )
}

store_roc <- function(roc_data, output_filename) {
  write.table(list(tpr=roc_data$tpr, fpr=roc_data$fpr), row.names=FALSE, quote=FALSE, sep="\t", file=output_filename)
}

plot_roc <- function(roc_data, output_filename, width = 800, height = 800, pointsize = 20) {
  png(output_filename, width = width, height = height, pointsize = pointsize)
  plot(1 - roc_data$fpr, roc_data$tpr, t="s", col="red", xlab="1-Specificity", ylab="Sensitivity", main="ROC curve of TF motif predictor", 
      xlim=c(1,0), lwd = 4, cex.axis=1.4, cex.main=1.4, cex.lab=1.4, cex.sub=1.4, family='Liberation')
  txt <- paste("AUC = ", signif(roc_data$auc, digits = 6), sept="")
  legend(x="bottomright", legend=txt, col=c("red"), lty=1, lwd=4, cex=1.2)
  dummy <- dev.off() # store to a variable to suppress a message
}

roc_curve_as_points_list <- function(tpr, fpr) {
  n_bins <- length(tpr)
  roc_curve <- list()
  for(i in 1:n_bins) {
    roc_curve[[i]] <- list(tpr=tpr[[i]], fpr=fpr[[i]])
  }
  return(roc_curve)
}

width = 800
height = 800
pointsize = 20

option_list = c(
  arglist_sequence_options,
  make_option(c("--positive-file"), dest='positive_fn', type='character', default=NA, help="Precomputed positive sequences filename"),
  make_option(c("--negative-file"), dest='negative_fn', type='character', default=NA, help="Precomputed negative sequences filename"),

  arglist_motif_options,

  make_option(c("--top"), dest="top_fraction", type="double", default=0.1, help="Fraction of top sequences to take [default=%default]"),
  make_option(c("--bins"), dest="num_bins", type="integer", default=1000, help="Number of bins for ROC computations [default=%default]"),

  make_option(c("--plot"), dest="plot_image", default=FALSE, action="store_true", help="Plot ROC curve"),
  make_option(c("--plot-filename"), dest="image_filename", type="character", default="/results/roc_curve.png", metavar='FILENAME', help="Specify plot filename [default=%default]"),
  make_option(c("--roc"), dest="store_roc", default=FALSE, action="store_true", help="Store ROC curve point"),
  make_option(c("--roc-filename"), dest="roc_filename",type="character", default="/results/roc_curve.tsv", help="Specify ROC curve points filename [default=%default]"),
  make_option(c("--json"), dest="jsonify_results", default=FALSE, action="store_true", help="Print results as a json file")
)

usage = paste(
  "\n",
  "docker run --rm \\",
  "           --volume {Motif matrix}:/motif[.pfm|.pcm]:ro \\",
  "           --volume {Selex FASTA}:/seq[.fa|.fq][.gz]:ro \\",
  "           pwmeval_selex \\",
  "               --seq /seq.fastq.gz \\",
  "               --motif /motif.pfm \\",
  "               [options]\n",
  "  or\n",
  "docker run --rm  pwmeval_selex --motif-url {Motif URL} --seq-url {Selex FASTA URL} [options]\n",
  "\n",
  "If you need output files (typically ROC-curve figures, you should additionally mount results folder), e.g.\n",
  "docker run --rm \\",
  "           --volume {Motif matrix}:/motif[.pfm|.pcm]:ro \\",
  "           --volume {Selex FASTA}:/seq[.fa|.fq][.gz]:ro \\",
  "           --volume {Results folder}:/results \\",
  "           pwmeval_selex \\",
  "               --seq /seq.fa.gz \\",
  "               --motif /motif.pfm \\",
  "               --plot  --plot-filename /results/motif_ROC.png \\",
  "               --roc  --roc-filename /results/motif_ROC.tsv \\",
  "               [options]\n"
)
description = paste("\n",
                    "Note!\n",
                    "  All local paths (for FASTA file, PFM file and results folder) should be absolute.\n",
                    "  Sequences and motif format can be derived from extension.\n",
                    "  You can use pcm extension for positional count matrices and pfm/pfm for frequency matrices.\n",
                    "  You can use fa/fasta extensions for FASTA files and fq/fastq for FASTQ files.\n",
                    "  Also you can use gz extension for gzipped sequences.\n",
                    "  So that `--seq /seq.fastq.gz` is a correct way to pass a gzipped FASTQ file.\n",
                    "  Options like --fa/--fq, --gz/--not-compressed, --pcm/--pfm override derived format,\n",
                    "  what is especially useful for passing data via url.\n",
                    "  In case when format is specified via options, `/seq` and `/motif` with extension omitted can be used.\n")
opt_parser <- OptionParser(option_list=option_list, usage = usage, description=description);
opts_and_args <- parse_args(opt_parser, positional_arguments=TRUE);
opts <- opts_and_args[[1]]
args <- opts_and_args[[2]]

pfm_motif_filename = obtain_and_preprocess_motif(opts)

if (is.na(opts$positive_fn) && is.na(opts$negative_fn)) {
  pos_seq_fn = obtain_and_preprocess_sequences(opts)
  neg_seq_fn = tempfile()

  if (is.na(opts$seed)) {
    system(paste("/app/seqshuffle", shQuote(pos_seq_fn), ">", shQuote(neg_seq_fn)))
  } else {
    system(paste("/app/seqshuffle -s", opts$seed, shQuote(pos_seq_fn), ">", shQuote(neg_seq_fn)))
  }

  pos_seq_fn = append_flanks(pos_seq_fn, opts)
  neg_seq_fn = append_flanks(neg_seq_fn, opts)
} else if (is.na(opts$positive_fn) || is.na(opts$negative_fn)) {
  stop("Provide either both positive and negative prepared sequences, or none of them")
} else {
  pos_seq_fn = opts$positive_fn
  neg_seq_fn = opts$negative_fn
  if (endsWith(pos_seq_fn, '.gz')) {
    pos_seq_fn = decompress_file(pos_seq_fn, "gz")
  }
  if (endsWith(neg_seq_fn, '.gz')) {
    neg_seq_fn = decompress_file(neg_seq_fn, "gz")
  }
}

pos_scores_fn = tempfile('pos_scores')
neg_scores_fn = tempfile('neg_scores')

system(paste("/app/pwm_scoring -r -w", opts$pseudo_weight, "-m", shQuote(pfm_motif_filename), shQuote(pos_seq_fn), " > ", shQuote(pos_scores_fn)))
system(paste("/app/pwm_scoring -r -w", opts$pseudo_weight, "-m", shQuote(pfm_motif_filename), shQuote(neg_seq_fn), " > ", shQuote(neg_scores_fn)))

POS <- log10(as.numeric(read.table(pos_scores_fn, header=F)[,1]))
NEG <- log10(as.numeric(read.table(neg_scores_fn, header=F)[,1]))

roc_data <- auc_approx(POS, NEG, opts$top_fraction, opts$num_bins)
if (opts$plot_image) {
  plot_roc(roc_data, opts$image_filename, width = width, height = height, pointsize = pointsize)
}
if (opts$store_roc) {
  store_roc(roc_data, opts$roc_filename)
}

if (opts$jsonify_results) {
  library(rjson)
  metrics <- list(roc_auc=roc_data$auc)
  supplementary <- list(roc_curve=roc_curve_as_points_list(roc_data$tpr, roc_data$fpr))
  results <- list(metrics=metrics, supplementary=supplementary)
  writeLines(toJSON(results))
} else{
  writeLines(as.character(roc_data$auc))
}
